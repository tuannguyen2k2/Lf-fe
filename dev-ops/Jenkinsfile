_BUILD_NUMBER = env.BUILD_NUMBER
_BRANCH_NAME = env.BRANCH_NAME

TIMEZONE = "GMT+7"
APP_BOOT_TIME_SECOND = 5
SLACK_CHANNEL_NAME = "GMQ6JQ1FT"


node{
    try {
        if (_BRANCH_NAME.matches("dev|staging")) {
            notifyBuild("STARTED", SLACK_CHANNEL_NAME)
        }

        stage ("Checkout source") {
            checkout scm
        }

        stage ("Run unit test") {
            println "Passed"
        }


        if (_BRANCH_NAME.matches("dev")) {
            buildDev()
        }else if (_BRANCH_NAME.matches("staging")) {
            buildStaging()
        }
        
        currentBuild.result = "SUCCESS"
    } catch (e) {
        currentBuild.result = "FAILURE"
        throw e
    } finally {
        if (_BRANCH_NAME.matches("dev|staging")) {
            def time = formatMilisecondTime(currentBuild.timeInMillis, TIMEZONE)
            def duration = durationFormat(currentBuild.duration)
            def buildDetail = "\n————————————————————" +
                              "\n*Build Time:* ${time}" +
                              "\n*Duration:* ${duration}" +
                              "\n*Change Log (DESC):*\n${getChangeLog()}"

            sleep(APP_BOOT_TIME_SECOND)
            notifyBuild(currentBuild.result, SLACK_CHANNEL_NAME, buildDetail)
        }
    }
}


def buildDev(){
    TARGET_FOLDER="/data/deploy/lifUni"
    APP_NAME = "lf-fe"
    APP_DEV_PORT=6503

    BUILD_COMMAND = """
                        cd ./source
                        npm install
                        npm run build:dev
                        ls ./build
                        tar -zcvf build.tar.gz ./build
                    """
    stage ("Build source") {
        sh """
            ${BUILD_COMMAND}
        """
    }
    stage("Upload build to remote") {

        try {
            sh """
                sudo docker-compose -f ${TARGET_FOLDER}/${APP_NAME}-dev/docker-compose.yml down
                sudo docker rmi -f ${APP_NAME}-dev:1.0
            """
        } catch (e) {

        }
        sh """
            sudo rm -rf ${TARGET_FOLDER}/${APP_NAME}-dev
            sudo mkdir -p ${TARGET_FOLDER}/${APP_NAME}-dev
            sudo cp ./source/build.tar.gz ${TARGET_FOLDER}/${APP_NAME}-dev/
            sudo cp ./source/appServer.js ${TARGET_FOLDER}/${APP_NAME}-dev/
            sudo cp ./source/package.json ${TARGET_FOLDER}/${APP_NAME}-dev/
            sudo cp ./dev-ops/Dockerfile ${TARGET_FOLDER}/${APP_NAME}-dev/
            sudo cp ./dev-ops/docker-compose.yml ${TARGET_FOLDER}/${APP_NAME}-dev/
            sudo cp ./source/.env ${TARGET_FOLDER}/${APP_NAME}-dev/

            sudo sed -i 's/{PORT}/${APP_DEV_PORT}/g' ${TARGET_FOLDER}/${APP_NAME}-dev/appServer.js
            sudo sed -i 's/{PORT}/${APP_DEV_PORT}/g' ${TARGET_FOLDER}/${APP_NAME}-dev/Dockerfile
            sudo sed -i 's/{PORT}/${APP_DEV_PORT}/g' ${TARGET_FOLDER}/${APP_NAME}-dev/docker-compose.yml
            sudo sed -i 's/{CONTAINER_NAME}/${APP_NAME}-dev/g' ${TARGET_FOLDER}/${APP_NAME}-dev/docker-compose.yml
            sudo sed -i 's/{CONTAINER_IMAGE}/${APP_NAME}-dev/g' ${TARGET_FOLDER}/${APP_NAME}-dev/docker-compose.yml

            sudo tar -zxvf ${TARGET_FOLDER}/${APP_NAME}-dev/build.tar.gz -C ${TARGET_FOLDER}/${APP_NAME}-dev/
            sudo rm -rf ${TARGET_FOLDER}/${APP_NAME}-dev/build.tar.gz
            sudo docker build -t ${APP_NAME}-dev:1.0 -f ${TARGET_FOLDER}/${APP_NAME}-dev/Dockerfile ${TARGET_FOLDER}/${APP_NAME}-dev/

        """
    }

    stage ("Deploy to ${_BRANCH_NAME} environment") {
        sh """
            sudo docker-compose -f ${TARGET_FOLDER}/${APP_NAME}-dev/docker-compose.yml up -d
        """
        sleep(0)
    }
}

def buildStaging(){
    TARGET_FOLDER="/data/deploy/lifUni/staging"
    APP_NAME = "lf-fe-demo"
    APP_DEV_PORT=6510

    BUILD_COMMAND = """
                        cd ./source
                        npm install
                        npm run build:staging
                        ls ./build
                        tar -zcvf build.tar.gz ./build
                    """
    stage ("Build source") {
        sh """
            ${BUILD_COMMAND}
        """
    }
    stage("Upload build to remote") {

        try {
            sh """
                sudo docker-compose -f ${TARGET_FOLDER}/${APP_NAME}-dev/docker-compose.yml down
                sudo docker rmi -f ${APP_NAME}-dev:1.0
            """
        } catch (e) {

        }
        sh """
            sudo rm -rf ${TARGET_FOLDER}/${APP_NAME}-dev
            sudo mkdir -p ${TARGET_FOLDER}/${APP_NAME}-dev
            sudo cp ./source/build.tar.gz ${TARGET_FOLDER}/${APP_NAME}-dev/
            sudo cp ./source/appServer.js ${TARGET_FOLDER}/${APP_NAME}-dev/
            sudo cp ./source/package.json ${TARGET_FOLDER}/${APP_NAME}-dev/
            sudo cp ./dev-ops/Dockerfile ${TARGET_FOLDER}/${APP_NAME}-dev/
            sudo cp ./dev-ops/docker-compose.yml ${TARGET_FOLDER}/${APP_NAME}-dev/

            sudo sed -i 's/{PORT}/${APP_DEV_PORT}/g' ${TARGET_FOLDER}/${APP_NAME}-dev/appServer.js
            sudo sed -i 's/{PORT}/${APP_DEV_PORT}/g' ${TARGET_FOLDER}/${APP_NAME}-dev/Dockerfile
            sudo sed -i 's/{PORT}/${APP_DEV_PORT}/g' ${TARGET_FOLDER}/${APP_NAME}-dev/docker-compose.yml
            sudo sed -i 's/{CONTAINER_NAME}/${APP_NAME}-dev/g' ${TARGET_FOLDER}/${APP_NAME}-dev/docker-compose.yml
            sudo sed -i 's/{CONTAINER_IMAGE}/${APP_NAME}-dev/g' ${TARGET_FOLDER}/${APP_NAME}-dev/docker-compose.yml

            sudo tar -zxvf ${TARGET_FOLDER}/${APP_NAME}-dev/build.tar.gz -C ${TARGET_FOLDER}/${APP_NAME}-dev/
            sudo rm -rf ${TARGET_FOLDER}/${APP_NAME}-dev/build.tar.gz
            sudo docker build -t ${APP_NAME}-dev:1.0 -f ${TARGET_FOLDER}/${APP_NAME}-dev/Dockerfile ${TARGET_FOLDER}/${APP_NAME}-dev/

        """
    }

    stage ("Deploy to ${_BRANCH_NAME} environment") {
        sh """
            sudo docker-compose -f ${TARGET_FOLDER}/${APP_NAME}-dev/docker-compose.yml up -d
        """
        sleep(0)
    }
}


// ================================
// HELPER FUNCTION
// ================================

def notifyBuild(String buildStatus, String channelName, String message = "") {
    def colorName = ""
    def emoji = ""
    if (buildStatus == "STARTED") {
        colorName = "#2196f3"
        emoji = ":fast_forward:"
    } else if (buildStatus == "SUCCESS") {
        colorName = "good"
        emoji = ":white_check_mark:"
    } else {
        colorName = "#dc3545"
        emoji = ":x:"
    }

    def text = "${emoji} ${buildStatus}: Job <${env.BUILD_URL}/console|${env.JOB_NAME} - build ${env.BUILD_NUMBER}>"
    if (!message.isEmpty()) {
        // concat a Combining Grapheme Joiner character U+034F before special character to prevent markdown formatting
        // [char] => U+034F [char]
        // reference: https://en.wikipedia.org/wiki/Combining_Grapheme_Joiner
        text += message.replaceAll("`", "͏`")
    }

    slackSend (channel: channelName, failOnError: true, color: colorName, message: text)
}

def getChangeLog() {
    def changeLogSets = currentBuild.changeSets
    if (changeLogSets.isEmpty()) {
        return "    (No changes)"
    }

    def text = ""
    for (int i = changeLogSets.size() - 1; i >= 0; i--) {
        for (def entry in changeLogSets[i].items) {
            text += ":white_small_square: ${entry.author} - ${entry.msg}\n"
        }
    }
    return text
}

def formatMilisecondTime(timeInMillis, timeZone) {
    return new Date(timeInMillis).format("MMM dd, yyyy HH:mm:ss", TimeZone.getTimeZone(timeZone))
}

def durationFormat(long milisecond) {
    def min = milisecond.intdiv(1000).intdiv(60)
    def sec = milisecond.intdiv(1000) % 60
    def result = (min > 0 ? "${min}m " : "") + (sec > 0 ? "${sec}s" : "")
    return result
}